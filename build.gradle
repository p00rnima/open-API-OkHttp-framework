buildscript {
    ext {
        dependencyManagementPluginVersion = '1.0.3.RELEASE'
        js2pPluginVersion = '1.0.2'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
//        maven { url "https://projectlombok.org/edge-releases" }
    }
    dependencies {
        classpath ("gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.22.1")
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}")
        classpath "org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:${js2pPluginVersion}"
        classpath "net.masterthought:cucumber-reporting:3.18.0"
        classpath group: 'org.jdbi', name: 'jdbi3-postgres', version: '3.0.0-alpha0'
        classpath group: 'org.projectlombok', name: 'lombok', version: '1.18.24'
    }
}

plugins {
    id "net.ltgt.apt" version "0.10"
    id "com.palantir.docker" version "0.22.1"
    id "nu.studer.credentials" version "2.1"
}


// Dependency versions
ext.logbackVersion = '1.2.3'
ext.slf4jVersion = '1.7.35'
//ext.slf4jVersion = '1.8.0-beta2'
ext.junitVersion = '4.12'
ext.jacksonVersion = '2.13.1'
ext.apacheCommondLangVersion = '3.12.0'
ext.requestBuilderVersion = '0.0.1'
ext.cucumberVersion = '1.2.5'
ext.assertjVersion = '3.22.0'
ext.testngVersion = '6.11'
ext.okHttpLoggingVersion = '1.0.1'
ext.casinoModuleVersion = '1.1.0'
ext.jdbiVersion = '3.0.0-alpha0'
ext.ojdbc6Version = '11.2.0.3'
ext.fluentLeniumVersion = '4.0.0'
ext.seleniumVersion = '3.141.59'
ext.cucumberVersion = '2.4.0'
ext.testraPluginVersion = '1.0-rc3'
ext.unitilsVersion = '3.4.6'

allprojects {
    group 'com.openapi.fcds.test'
    version '1.0-SNAPSHOT'

    apply plugin: 'idea'
    apply plugin: 'project-report'

    repositories {
        mavenCentral()
//        maven { url 'https://projectlombok.org/edge-releases' }
    }
    idea {
        module {
            outputDir file('build/classes/main')
            testOutputDir file('build/classes/test')
        }
    }
    if (project.convention.findPlugin(JavaPluginConvention)) {
        sourceSets.main.output.classesDir = new File(buildDir, "classes/main")
        sourceSets.main.output.resourcesDir = new File(buildDir, "resources/main")
        sourceSets.test.output.classesDir = new File(buildDir, "classes/test")
        sourceSets.test.output.resourcesDir = new File(buildDir, "resources/test")
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
//    apply plugin: "com.github.spotbugs"
    //apply plugin: 'org.sonarqube'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    dependencyManagement {
        dependencies {
            // External dependencies
            dependency group: 'ch.qos.logback', name: 'logback-classic', version: "${logbackVersion}"
            dependency group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
            dependency group: 'org.testng', name: 'testng', version: "${testngVersion}"
            dependency group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "${jacksonVersion}"
            dependency group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "${jacksonVersion}"
            dependency group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${jacksonVersion}"
            dependency group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: "${jacksonVersion}"
            dependency group: 'org.apache.commons', name: 'commons-lang3', version: "${apacheCommondLangVersion}"
            dependency group: 'org.assertj', name: 'assertj-core', version: "${assertjVersion}"
            dependency group: 'com.jleth.util', name: 'okhttp2-logging', version: "${okHttpLoggingVersion}"
            dependency group: 'org.jdbi', name: 'jdbi3-postgres', version: "${jdbiVersion}"
            dependency group: 'ojdbc7', name: 'ojdbc7', version: '12.1.0.1'
            dependency group: 'net.sf.supercsv', name: 'super-csv-java8', version: '2.4.0'
            dependency group: 'org.fluentlenium', name: 'fluentlenium-assertj', version: fluentLeniumVersion
            dependency group: 'org.fluentlenium', name: 'fluentlenium-testng', version: fluentLeniumVersion
            dependency group: 'org.fluentlenium', name: 'fluentlenium-cucumber', version: fluentLeniumVersion
            dependency group: 'org.seleniumhq.selenium', name: 'selenium-java', version: seleniumVersion
            dependency group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'
            dependency group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
            dependency group: 'org.modelmapper', name: 'modelmapper', version: '1.1.0'
            dependency group: 'com.healthmarketscience.sqlbuilder', name: 'sqlbuilder', version: '2.1.7'
            dependency group: 'io.cucumber', name: 'cucumber-core', version: "${cucumberVersion}"
            dependency group: 'io.cucumber', name: 'cucumber-java', version: "${cucumberVersion}"
            dependency group: 'io.cucumber', name: 'cucumber-testng', version: "${cucumberVersion}"
            dependency group: 'io.github.testra', name: 'testra-java-cucumber2-reporter', version: "${testraPluginVersion}"
            dependency group: 'org.projectlombok', name: 'lombok', version: '1.18.24'
            dependency group: 'org.unitils', name: 'unitils-core', version: "${unitilsVersion}"

        }
    }


//    // To generate an HTML report instead of XML
//    tasks.withType(com.github.spotbugs.SpotBugsTask) {
//        reports {
//            xml.enabled = false
//            html.enabled = true
//        }
//    }
}

configure(subprojects.findAll {
    it.name == 'openapi-api-client'
}) {
    apply plugin: 'jsonschema2pojo'
}

task cleanGradleDaemonLogs {
    doLast {
        println("Cleaning up Gradle daemon logs...")
        def gradle = project.getGradle()
        new File("${gradle.getGradleUserHomeDir().getAbsolutePath()}/daemon/${gradle.getGradleVersion()}").listFiles().each {
            if (it.getName().endsWith('.out.log')) {
                logger.debug("Cleaning up daemon log file $it")
                it.delete()
            }
        }
    }
}
